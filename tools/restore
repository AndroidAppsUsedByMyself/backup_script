#!/system/bin/sh
MODDIR=${0%/*}
[[ $(id -u) -ne 0 ]] && echo "你是憨批？不給Root用你媽 爬" && exit 1
[[ -z $(echo $MODDIR | grep -v 'mt') ]] && echo "草泥馬不解壓縮？用毛線 憨批" && exit 1
[[ ! -d $MODDIR/tools ]] && echo "$MODDIR/tools目錄遺失" && exit 1
md5path="$MODDIR"
tools_path=$MODDIR/tools
. $tools_path/bin.sh
Open_apps=$(dumpsys window | grep -w mCurrentFocus | egrep -oh "[^ ]*/[^//}]+" | cut -f 1 -d "/")

#記錄開始時間
starttime1=$(date +"%Y-%m-%d %H:%M:%S")
i=1
txt="$MODDIR/name.txt"
[[ ! -e $txt ]] && echo "$txt缺少" && exit 0
r=$(cat $txt | grep -v "#" | sed -e '/^$/d' | sed -n '$=')
[[ ! -z $r ]] && h=$r
#顯示執行結果
echo_log() {
	if [[ $? = 0 ]]; then
		echoRgb "$1成功" "0" "1"
		return 0
	else
		echoRgb "$1恢複失敗，過世了" "0" "0"
		return 1
	fi
}
if [[ ! $(getenforce) = Permissive ]]; then
	setenforce 0
	echo_log "selinux關閉"
	if [[ $? = 0 ]]; then
		selinux_result=0
		Sn=1
		echoRgb "使用原目錄安裝程序 關閉selinux"
	else
		selinux_result=1
		echoRgb "selinux無法關閉 使用cp方式安裝"
	fi
else
	selinux_result=0
	echoRgb "使用原目錄安裝程序 關閉selinux"
fi
echoRgb "selinux狀態:$selinux_result"
echoRgb "當前使用的恢復程序:$(appinfo -o ands -pn $Open_apps 2>/dev/null)"
bn=37
#開始循環$txt內的資料進行恢複
#cd /data/local/tmp
{
while [[ $i -le $h ]]; do
	#let bn++
	#[[ $bn -ge 37 ]] && bn=31
	echoRgb "恢複第$i個應用 總共$h個 剩下$(($h - $i))個應用"
	name=$(cat $txt | grep -v "#" | sed -e '/^$/d' | sed -n "${i}p" | awk '{print $2}')
	name2=$(cat $txt | grep -v "#" | sed -e '/^$/d' | sed -n "${i}p" | awk '{print $1}')
	[[ -z $name ]] && echoRgb "警告! name.txt軟件包名獲取失敗，可能修改有問題" "0" "0" && exit 1
	if [[ -n $name && -d $MODDIR/$name ]]; then
		echoRgb "恢複$name2 ($name)"
		starttime2=$(date +"%Y-%m-%d %H:%M:%S")
		zb=$(Package_names "$name")
		if [[ $(find "$MODDIR/$name" -maxdepth 1 -name "*.apk" -type f | wc -l) = 1 ]]; then
			if [[ -z $zb ]]; then
				echoRgb "$name2是常規Apk 開始安裝"
				if [[ $selinux_result = 1 ]]; then
					cp -r "$MODDIR/$name/base.apk" /data/local/tmp
					pm install -r "/data/local/tmp/base.apk" >/dev/null 2>&1
					echo_log "Apk安裝"
					rm -rf /data/local/tmp/*
				else
					pm install -r "$MODDIR/$name/base.apk" >/dev/null 2>&1
					echo_log "Apk安裝"
				fi
			else
				echoRgb "$name2存在當前系統中 略過安裝Apk"
			fi
		else
			if [[ -z $zb ]]; then
				b=$(pm install-create | grep -E -o '[0-9]+')
				echoRgb "$name2是多分包Apk 開始安裝"
				if [[ -e $MODDIR/$name/nmsl.apk ]]; then
					if [[ $selinux_result = 1 ]]; then
						cp -r "$MODDIR/$name/nmsl.apk" /data/local/tmp
						pm install -r "/data/local/tmp/nmsl.apk" >/dev/null 2>&1
						echo_log "Apk安裝"
						rm -rf /data/local/tmp/*
					else
						pm install -r "$MODDIR/$name/nmsl.apk" >/dev/null 2>&1
						echo_log "Apk安裝"
					fi
				fi
				find "$MODDIR/$name" -maxdepth 1 -name "*.apk" -type f | while read i; do
					ad=$(basename $i | grep -v 'nmsl.apk')
					if [[ -n $ad ]]; then
						if [[ $selinux_result = 1 ]]; then
							cp -r "$i" /data/local/tmp
							pm install-write $b $ad /data/local/tmp/$ad >/dev/null 2>&1
							echo_log "$(basename "$i")安裝"
						else
							pm install-write $b $ad $i >/dev/null 2>&1
							echo_log "$(basename "$i")安裝"
						fi
					fi
				done
				pm install-commit $b
				echo_log "split Apk安裝"
				[[ $selinux_result = 1 ]] && rm -rf /data/local/tmp/*
			else
				echoRgb "$name2存在當前系統中 略過安裝Apk"
			fi
		fi
		if [[ -n $(Package_names "$name") ]]; then
			#停止軟件
			[[ ! $name = $Open_apps ]] && am force-stop $name
			echoRgb "$name2存在 開始釋放數據"
			if [[ $(cat /data/system/packages.list | grep -w "$name" | awk '{print $1}') = $name ]]; then
				G=$(dumpsys package "$name" | awk '/userId=/{print $1}' | sed 's/userId=//g' | head -1)
				X=$(cat /data/system/packages.list | grep -w "$name" | awk '{print $4}')
				find $MODDIR/$name -name "*.tar.zst" -o -name "*.tar.lz4" -type f | while read i; do
					case $(basename $i) in
					*-user.tar.zst)
						[[ -d /data/user/0/$name ]] && rm -rf /data/user/0/$name
						pv $i | tar -I zstd -xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					*-user.tar.lz4)
						[[ -d /data/user/0/$name ]] && rm -rf /data/user/0/$name
						pv $i | tar xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					*-data.tar.zst)
						[[ -d /sdcard/Android/data/$name ]] && rm -rf /sdcard/Android/data/$name
						pv $i | tar -I zstd -xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					*-data.tar.lz4)
						[[ -d /sdcard/Android/data/$name ]] && rm -rf /sdcard/Android/data/$name
						pv $i | tar xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					*-obb.tar.zst)
						[[ -d /sdcard/Android/obb/$name ]] && rm -rf /sdcard/Android/obb/$name
						pv $i | tar -I zstd -xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					*-obb.tar.lz4)
						[[ -d /sdcard/Android/obb/$name ]] && rm -rf /sdcard/Android/obb/$name
						pv $i | tar xPpf -
						echo_log "$(basename $i)解壓縮"
						;;
					esac
				done
				if [[ -d $X && -n $G ]]; then
					chown -R $G:$G $X
					echoRgb "路徑$X  權限:$G:$G"
					echoRgb "$name2完成數據恢複"
				fi
			fi
		fi
		endtime 2 "$name2恢複"
		echoRgb
	else
		echoRgb "$name2資料夾遺失，無法恢複" "0" "0"
	fi
	let i++
done

#setenforce 1
echoRgb "批量恢複完成"
endtime 1 "批量恢複開始到結束"
[[ -n $Sn ]] && setenforce 1
} &